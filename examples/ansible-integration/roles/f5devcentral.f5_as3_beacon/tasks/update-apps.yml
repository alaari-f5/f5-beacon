---
# Retrieve existing apps from Beacon defined within Ansible
- name: Get current Beacon app IDs by name
  uri:
    url: "https://api.cloudservices.f5.com/beacon/v1/applications?filter=name={{ item.key }}"
    method: GET
    headers:
      Authorization: "Bearer {{ bconauth.json.access_token }}"
      Content-Type: "application/json"
    body_format: json
  delegate_to: localhost
  register: all_bcon_apps
  with_dict: "{{ bcon_apps }}"

# Empty list for Beacon app IDs to retrieve
- set_fact:
    appids: []

- name: Update list of app IDs
  set_fact:
    appids: "{{ appids + [ item.json.apps[0].id ] }}"
  loop: "{{ all_bcon_apps.results }}"
  when: item.json.apps | length > 0

- debug: var=appids

- name: Get current Beacon apps by ID
  uri:
    url: "https://api.cloudservices.f5.com/beacon/v1/applications/{{ item }}"
    method: GET
    headers:
      Authorization: "Bearer {{ bconauth.json.access_token }}"
      Content-Type: "application/json"
    body_format: json
  delegate_to: localhost
  register: complete_bcon_apps
  loop: "{{ appids }}"

- debug: var=complete_bcon_apps

- name: Get current Beacon components
  uri:
    url: "https://api.cloudservices.f5.com/beacon/v1/components-health?filter=sourceName={{ env_hostname }}"
    method: GET
    headers:
      Authorization: "Bearer {{ bconauth.json.access_token }}"
      Content-Type: "application/json"
    body_format: json
  delegate_to: localhost
  register: all_bcon_components

- debug: var=all_bcon_components.json.componentsHealth

# Parse AS3/Beacon data for appropriate actions
- command: "python {{ role_path }}/files/bcon_as3_parse.py '''{{ as3json | to_json }}''' '''{{ complete_bcon_apps.results | to_json }}''' '''{{ all_bcon_components.json.componentsHealth | to_json }}''' '''{{ env_hostname }}'''"
  register: as3_apps
  delegate_to: localhost

- debug: var=as3_apps.stdout

# Update existing apps using declare
- name: Deploy Beacon apps
  uri:
    url: "https://api.cloudservices.f5.com/beacon/v1/declare"
    method: POST
    body: "{{item.value}}"
    body_format: json
    headers:
      Authorization: "Bearer {{ bconauth.json.access_token }}"
      Content-Type: "application/json"
  delegate_to: localhost
  register: app_declare_deploy
  with_dict: "{{ as3_apps.stdout }}"
  when: item.value.action == 'deploy' and item.value.declaration != []

- debug: var=app_declare_deploy

- name: Wait for apps deploy to finish
  uri:
    url: "{{app_declare_deploy.results[0].json.taskReference}}"
    method: GET
    headers:
      Authorization: "Bearer {{ bconauth.json.access_token }}"
      Content-Type: "application/json"
    status_code: 200
  register: app_deploy_task
  delegate_to: localhost
  ignore_errors: true
  with_dict: "{{ as3_apps.stdout }}"
  until: app_deploy_task.json.status == "Completed"
  retries: 10
  delay: 5
  when: item.value.action == 'deploy' and item.value.declaration != []

- debug: var=app_deploy_task

# Update existing apps using declare
- name: Remove bcon Apps
  uri:
    url: "https://api.cloudservices.f5.com/beacon/v1/declare"
    method: POST
    body: "{{item.value}}"
    body_format: json
    headers:
      Authorization: "Bearer {{ bconauth.json.access_token }}"
      Content-Type: "application/json"
  delegate_to: localhost
  register: app_declare_remove
  with_dict: "{{ as3_apps.stdout }}"
  when: item.value.action == "remove" and item.value.declaration != []

- name: Wait for apps remove to finish
  uri:
    url: "{{app_declare_remove.results[0].json.taskReference}}"
    method: GET
    headers:
      Authorization: "Bearer {{ bconauth.json.access_token }}"
      Content-Type: "application/json"
    status_code: 200
  register: app_remove_task
  delegate_to: localhost
  with_dict: "{{ as3_apps.stdout }}"
  ignore_errors: true
  until: app_remove_task.json.status == "Completed"
  retries: 10
  delay: 5
  when: item.value.action == "remove" and item.value.declaration != []

- debug: var=app_remove_task
